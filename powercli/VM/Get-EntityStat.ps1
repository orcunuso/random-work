# Get statistical data with the QueryPerf method## Version 1.1# History#  24/10/2008 v1#    - initial version#  15/02/2009 v1.1#    - corrected MaxSamples parameter#    - corrected Cluster entity clastype#    - corrected missing Start and Finish parameters test#    - added -QueryMetrics option#    - added -QueryInstances option##  01/03/2009 v1.2#    - corrected issue with missing -Maxsamples parameter#    - corrected issue with incorrect instances returned for -QueryInstances#    - introduced default value ("RT") for -Interval parameter#  09/03/2009 v1.3#    - corrected issue with -Maxsamples parameter# # Parameters:# -Entity <VIObject>	: the object for which the statiscal data will be collected. Only 1 object allowed !# -Start <DateTime>		: start of the interval# -Finish <DateTime>	: end of the interval# -Stat <string[]>		: array of statistic identifiers# -Instance <string>	: some statistic identifiers allow instances.#                         ("" : aggregate, "*" : all, array of specific instances)# -Interval <string>	: desired sampling interval#						  allowed values: "RT","HI1","HI2","HI3","HI4"#						  RT : real time#                         HI : historical interval#                         (results in these defaults 20, 300, 1800, 7200, 86400 seconds)# -Maxsamples <int32>	: only for "Real time" interval; number of intervals# -QueryMetrics			: return all available metrics for the Entity# -QueryInstances		: return all available instances for the Entity and Stat## Return: array of objects# Properties: CounterId, CounterName, Instance, Timestamp, Interval, Value, Unit#param ($entity = $(Throw "-Entity is a required parameter."),$start,$finish,[string]$stat,[string]$instance = "",[string]$interval = "RT", [int]$maxsamples,[switch]$querymetrics,[switch]$queryinstances)$validInterval = "RT","HI1","HI2","HI3","HI4"# Test if entity is validif(!(("HostSystem","VirtualMachine","ClusterComputeResource","ResourcePool") -contains $entity.gettype().Name)) {	Throw "-Entity parameters should be of type HostSystem , VirtualMachine, ClusterComputeResource or ResourcePool"}$perfMgr = Get-View (Get-View ServiceInstance).content.perfManager# Create performance counter hashtable$pcTable = New-Object Hashtable$keyTable = New-Object Hashtableforeach($pC in $perfMgr.PerfCounter){	if($pC.Level -ne 99){		$pctable.Add(($pC.GroupInfo.Key + "." + $pC.NameInfo.Key + "." + $pC.RollupType),$pC.Key)		$keyTable.Add($pC.Key, $pC)	}}# Test for a valid $intervalif($interval.ToString().Split(" ").count -gt 1){	Throw "Only 1 interval allowed."}switch($interval){	"RT" {$numinterval = 20}	"HI1" {$numinterval = $perfMgr.HistoricalInterval[0].SamplingPeriod}	"HI2" {$numinterval = $perfMgr.HistoricalInterval[1].SamplingPeriod}	"HI3" {$numinterval = $perfMgr.HistoricalInterval[2].SamplingPeriod}	"HI4" {$numinterval = $perfMgr.HistoricalInterval[3].SamplingPeriod}	Default {		Throw "-Interval parameter invalid. `nValid values are: $validInterval"	}}# Test if QueryMetrics is givenif($querymetrics){	$metrics = $perfMgr.QueryAvailablePerfMetric($entity.MoRef,$null,$null,$numinterval)	$metricslist = @()	foreach($pmId in $metrics){		$row = "" | select Group, Name, Rollup, Id, Level, Type, Unit		$pC = $keyTable[$pmId.CounterId]		$row.Group = $pC.GroupInfo.Key		$row.Name = $pC.NameInfo.Key		$row.Rollup = $pC.RollupType		$row.Id = $pC.Key		$row.Level = $pC.Level		$row.Type = $pC.StatsType		$row.Unit = $pC.UnitInfo.Key		$metricslist += $row	}	return ($metricslist | Sort-Object -unique -property Group,Name,Rollup)}# Test if start is validif($start -ne $null -and $start -ne ""){	if($start.gettype().name -ne "DateTime") {		Throw "-Start parameter should be a DateTime value"	}}# Test if finish is validif($finish -ne $null -and $finish -ne ""){	if($finish.gettype().name -ne "DateTime") {		Throw "-Start parameter should be a DateTime value"	}}# Test start-finish intervalif($start -ne $null -and $finish -ne $null -and $start -ge $finish){	Throw "-Start time should 'older' than -Finish time."}# Test if stat is valid$statarray = $stat.Split(" ")$unitarray = @()$instancesList = @()foreach($st in $statarray){	if($pcTable[$st] -eq $null){		Throw "-Stat parameter $st is invalid."	}	$pcInfo = $perfMgr.QueryPerfCounter($pcTable[$st])	$unitarray += $pcInfo[0].UnitInfo.Key	$metricId = $perfMgr.QueryAvailablePerfMetric($entity.MoRef,$null,$null,$numinterval)	# Test if QueryInstances in given	if($queryinstances){		$mKey = $pcTable[$st]		foreach($metric in $metricId){			if($metric.CounterId -eq $mKey){				$row = "" | Select Stat, Instance				$row.Stat = $st				$row.Instance = $metric.Instance				$instancesList += $row			} 		}	}	else{		# Test if instance is valid		$found = $false		$validInstances = @()		foreach($metric in $metricId){			if($metric.CounterId -eq $pcTable[$st]){				if($metric.Instance -eq "") {$cInstance = '""'} else {$cInstance = $metric.Instance}				$validInstances += $cInstance				if($instance -eq $metric.Instance){$found = $true}			}		}		if(!$found){			Throw "-Instance parameter invalid for requested stat: $st.`nValid values are: $validInstances"		}	}}if($queryinstances){	return $instancesList}# Test if $maxsamples is valid (only for real-time !)if($numinterval -ne 20 -and $maxsamples -ne ""){	Throw "-Maxsamples parameter is only valid for real time (-Interval 20) statistics"}$PQSpec = New-Object VMware.Vim.PerfQuerySpec$PQSpec.entity = $entity.MoRef$PQSpec.Format = "normal"$PQSpec.IntervalId = $numinterval$PQSpec.MetricId = @()foreach($st in $statarray){	$PMId = New-Object VMware.Vim.PerfMetricId	$PMId.counterId = $pcTable[$st]	if($instance -ne $null){		$PMId.instance = $instance	}	$PQSpec.MetricId += $PMId}$PQSpec.StartTime = $start$PQSpec.EndTime = $finishif($maxsamples -eq 0){  $PQSpec.maxSample = $null}$stats = $perfMgr.QueryPerf($PQSpec)# No data available (yet)if($stats[0].Value -eq $null) {return $null}# Extract data to custom object and return as array$data = @()for($i = 0; $i -lt $stats[0].SampleInfo.Count; $i ++ ){	for($j = 0; $j -lt $statarray.Count; $j ++ ){		$row = "" | Select CounterId, CounterName, Instance, Timestamp, Interval, Value, Unit		$row.CounterId = $stats[0].Value[$j].Id.CounterId		$row.CounterName = $statarray[$j]		$row.Instance = $stats[0].Value[$j].Id.Instance		$row.Timestamp = $stats[0].SampleInfo[$i].Timestamp		$row.Interval = $stats[0].SampleInfo[$i].Interval		$row.Value = $stats[0].Value[$j].Value[$i]		$row.Unit = $unitarray[$j]		$data += $row	}}$data